swagger: "2.0"
info:
  version: "1.0.0"
  title: "ACME RESTful API Server"
  description: "ACME RESTful API"
  contact:
    email: "support@acme.com"
host: "rest.acme.com"
basePath: "/v1/api/"
schemes:
  - "http"
  - "https"
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Users
    description: A group of registered acme users.
    externalDocs:
      description: "Read more"
      url: "http://www.acme.com/how-to-use-acme/teams"
  - name: Tickets
    description: A group of tickets inside a team or organization.
    externalDocs:
      description: "Read more"
      url: "http://www.acme.com/how-to-use-acme/tickets"
  - name: Tasks
    description: A group of personal scheduled or listed tasks.
    externalDocs:
      description: "Read more"
      url: "http://www.acme.com/how-to-use-acme/tasks"

paths:

  /users:
    get:
      tags:
        - Users
      summary: Get all users.
      description: API for getting all users.
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/User'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get one user.
      description: API for getting one user.
      operationId: getOneUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: A user identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: ""
          headers:
            ETag:
              type: string
              description: Entity Tag. A hash representation of the resource used for browser cache detection.
            Last-Modified:
              type: integer
              description: Timestamp when the last time the resource was updated.
          schema:
            $ref: '#/definitions/User'
        304:
          $ref: '#/responses/NotModified'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /users/{userId}/revision-history:
    get:
      tags:
        - Users
      summary: Get all revision history of a user.
      description: API for getting the revision history of a user.
      operationId: getUserRevisionHistory
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: A user identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Event'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets:
    get:
      tags:
        - Tickets
      summary: Get all tickets.
      description: API for getting all tickets.
      operationId: getAllTickets
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    post:
      tags:
        - Tickets
      summary: Creates tickets.
      description: API for creating tickets.
      operationId: createTickets
      security:
        - bearerAuth: []
      parameters:
        - name: body
          description: A collection of new tickets.
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
      responses:
        201:
          description: A collection of newly created tickets.
          schema:
            type: object
            properties:
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Get one ticket.
      description: API for getting one ticket.
      operationId: getOneTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: ""
          headers:
            ETag:
              type: string
              description: Entity Tag. A hash representation of the resource used for browser cache detection.
            Last-Modified:
              type: integer
              description: Timestamp when the last time the resource was updated.
          schema:
            $ref: '#/definitions/Ticket'
        304:
          $ref: '#/responses/NotModified'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    put:
      tags:
        - Tickets
      summary: Updates a ticket.
      description: API for updating a ticket.
      operationId: updateTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: body
          description: A revised ticket resource.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        204:
          $ref: '#/responses/ResourceUpdated'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        409:
          $ref: '#/responses/ResourceConflict'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    delete:
      tags:
        - Tickets
      summary: Deletes a ticket.
      description: API for deleting a ticket.
      operationId: deleteTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/ResourceDeleted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/revision-history:
    get:
      tags:
        - Tickets
      summary: Get all revision history of a ticket.
      description: API for getting the revision history of a ticket.
      operationId: getTicketRevisionHistory
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Event'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/duplicate:
    post:
      tags:
        - Tickets
      summary: Duplicates a task.
      operationId: duplicateTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: body
          description: The title of the duplicated ticket.
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
            required:
              - title
      responses:
        201:
          description: A collection of newly duplicated ticket.
          schema:
            type: object
            properties:
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/share:
    post:
      tags:
        - Tickets
      summary: Shares a task.
      operationId: shareTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: body
          description: To whom you will share the resource.
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
              email:
                type: string
      responses:
        202:
          $ref: '#/responses/RequestAccepted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/collaborators:
    get:
      tags:
        - Tickets
      summary: Get all ticket collaborators.
      operationId: getTicketCollaborators
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidCollection'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/archive:
    put:
      tags:
        - Tickets
      summary: Archives a ticket.
      description: API for archiving a ticket.
      operationId: archiveTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/RequestPerformed'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        402:
          $ref: '#/responses/PaidOperation'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/restore:
    put:
      tags:
        - Tickets
      summary: Restores a ticket.
      description: API for restoring a ticket.
      operationId: restoreTicket
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/RequestPerformed'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        402:
          $ref: '#/responses/PaidOperation'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/attachments:
    get:
      tags:
        - Tickets
      summary: Get all ticket attachments.
      description: API for getting all ticket attachments.
      operationId: getAllTicketAttachments
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Attachment'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    post:
      tags:
        - Tickets
      summary: Uploads file attachment to a ticket.
      description: API for uploading a file attachment to a ticket.
      operationId: uploadTicketAttachment
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: file
          description: The file to upload.
          in: formData
          type: file
      responses:
        201:
          $ref: '#/definitions/Attachment'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/attachments/{attachmentId}:
    delete:
      tags:
        - Tickets
      summary: Deletes a ticket attachment.
      description: API for deleting a ticket attachment.
      operationId: deleteTicketAttachment
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: attachmentId
          description: An attachment identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/ResourceDeleted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/conversations:
    get:
      tags:
        - Tickets
      summary: Get all ticket conversations.
      description: API for getting all ticket conversations.
      operationId: getAllTicketConversations
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Message'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    post:
      tags:
        - Tickets
      summary: Add message to a conversation.
      description: API for adding a message to a conversation.
      operationId: addConversationMessage
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: body
          description: A collection of new messages.
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
      responses:
        201:
          description: A collection of newly added messages to the conversation.
          schema:
            type: object
            properties:
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Message'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/conversations/{messageId}:
    get:
      tags:
        - Tickets
      summary: Get one conversation message.
      description: API for getting one conversation message.
      operationId: getOneConversationMessage
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: messageId
          description: A conversation message identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: ""
          headers:
            ETag:
              type: string
              description: Entity Tag. A hash representation of the resource used for browser cache detection.
            Last-Modified:
              type: integer
              description: Timestamp when the last time the resource was updated.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: '#/responses/NotModified'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    put:
      tags:
        - Tickets
      summary: Updates a ticket conversation message.
      description: API for updating a ticket conversation message.
      operationId: updateTicketConversationMessage
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: messageId
          description: A conversation message identifier.
          in: path
          required: true
          type: string
        - name: body
          description: A revised ticket resource.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Message'
      responses:
        204:
          $ref: '#/responses/ResourceUpdated'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        409:
          $ref: '#/responses/ResourceConflict'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    delete:
      tags:
        - Tickets
      summary: Deletes a ticket conversation message.
      description: API for deleting a ticket conversation message.
      operationId: deleteTicketConversationMessage
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: A ticket identifier.
          in: path
          required: true
          type: string
        - name: messageId
          description: A conversation message identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/ResourceDeleted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tickets/{ticketId}/conversations/{messageId}/revision-history:
    get:
      tags:
        - Tickets
      summary: Get all revision history of a conversation message.
      description: API for getting the revision history of a conversation message.
      operationId: getTicketConversationMessageRevisionHistory
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          description: Ticket identifier.
          in: path
          required: true
          type: string
        - name: messageId
          description: Conversation message identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Event'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'


  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all user tasks.
      description: API for getting all user tasks
      operationId: getAllUserTasks
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Task'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    post:
      tags:
        - Tasks
      summary: Creates tasks.
      description: API for creating tasks.
      operationId: createTasks
      security:
        - bearerAuth: []
      parameters:
        - name: body
          description: A collection of new tasks.
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
      responses:
        201:
          description: A collection of newly created tasks.
          schema:
            type: object
            properties:
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Task'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get one user task.
      description: API for getting one user task.
      operationId: getOneUserTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: ""
          headers:
            ETag:
              type: string
              description: Entity Tag. A hash representation of the resource used for browser cache detection.
            Last-Modified:
              type: integer
              description: Timestamp when the last time the resource was updated.
          schema:
            $ref: '#/definitions/Task'
        304:
          $ref: '#/responses/NotModified'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    put:
      tags:
        - Tasks
      summary: Updates a task.
      description: API for updating a task.
      operationId: updateTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: body
          description: A revised task resource.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        204:
          $ref: '#/responses/ResourceUpdated'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        409:
          $ref: '#/responses/ResourceConflict'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    delete:
      tags:
        - Tasks
      summary: Deletes a task.
      description: API for deleting a task.
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/ResourceDeleted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/revision-history:
    get:
      tags:
        - Tasks
      summary: Get all revision history of a conversation message.
      description: API for getting the revision history of a conversation message.
      operationId: getTaskRevisionHistory
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: Task identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Event'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/duplicate:
    post:
      tags:
        - Tasks
      summary: Duplicates a task.
      operationId: duplicateTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: body
          description: The name of the duplicated task.
          in: body
          required: true
          schema:
            type: object
            properties:
              newName:
                type: string
            required:
              - newName
      responses:
        201:
          description: A collection of newly duplicated task.
          schema:
            type: object
            properties:
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Task'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/share:
    post:
      tags:
        - Tasks
      summary: Shares a task.
      operationId: shareTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: body
          description: To whom you will share the resource.
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
              email:
                type: string
      responses:
        202:
          $ref: '#/responses/RequestAccepted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/collaborators:
    get:
      tags:
        - Tasks
      summary: Get all task collaborators.
      operationId: getTaskCollaborators
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidCollection'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/archive:
    put:
      tags:
        - Tasks
      summary: Archives a task.
      description: API for archiving a task.
      operationId: archiveTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/RequestPerformed'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        402:
          $ref: '#/responses/PaidOperation'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/restore:
    put:
      tags:
        - Tasks
      summary: Restores a task.
      description: API for restoring a task.
      operationId: restoreTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/RequestPerformed'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        402:
          $ref: '#/responses/PaidOperation'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/attachments:
    get:
      tags:
        - Tasks
      summary: Get all task attachments.
      description: API for getting all task attachments.
      operationId: getAllTaskAttachments
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: query
          in: query
          description: Search for resources containing the search keyword.
          required: false
          type: string
        - name: page
          in: query
          description: The desired page number.
          required: false
          type: integer
          default: 1
        - name: size
          in: query
          description: The maximum number of resources per page.
          required: false
          type: integer
          default: 10
        - name: sort
          in: query
          description: "Sort resources by this field (Ex.: Use ?sort=fieldName to sort by name in ascending order or sort=-fieldName for descending order."
          required: false
          type: string
          default: id
      responses:
        200:
          description: A collection of stored resources.
          headers:
            X-Resources-Count:
              type: integer
              description: Number of resources in the current page.
            X-Resources-Total:
              type: integer
              description: Total number of resources in the collection.
            X-Resources-Per-Page:
              type: integer
              description: Maximum number of resources allowed in a page.
            X-Pages-Count:
              type: integer
              description: Total number of pages in the collection.
          schema:
            type: object
            properties:
              _meta:
                $ref: '#/definitions/Meta'
              _links:
                type: array
                items:
                  $ref: '#/definitions/Link'
              _embedded:
                type: array
                items:
                  $ref: '#/definitions/Attachment'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/ResourceNotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'
    post:
      tags:
        - Tasks
      summary: Uploads file attachment to a task.
      description: API for uploading a file attachment to a task.
      operationId: uploadTaskAttachment
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: file
          description: The file to upload.
          in: formData
          type: file
      responses:
        201:
          $ref: '#/definitions/Attachment'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        405:
          $ref: '#/responses/MethodNotAllowed'
        409:
          $ref: '#/responses/DuplicateResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

  /tasks/{taskId}/attachments/{attachmentId}:
    delete:
      tags:
        - Tasks
      summary: Deletes a task attachment.
      description: API for deleting a task attachment.
      operationId: deleteTaskAttachment
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          description: A task identifier.
          in: path
          required: true
          type: string
        - name: attachmentId
          description: An attachment identifier.
          in: path
          required: true
          type: string
      responses:
        204:
          $ref: '#/responses/ResourceDeleted'
        400:
          $ref: '#/responses/BadRequest'
        402:
          $ref: '#/responses/PaidOperation'
        401:
          $ref: '#/responses/ExpiredSession'
        403:
          $ref: '#/responses/UnauthorizedRequest'
        404:
          $ref: '#/responses/ResourceNotFound'
        410:
          $ref: '#/responses/DeletedResource'
        422:
          $ref: '#/responses/UnprocessableEntity'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/ServerError'
        503:
          $ref: '#/responses/ServerUnavailable'

definitions:

  User:
    title: User
    type: object
    properties:
      id:
        type: string
        description: A user identifier.
        readOnly: true
      username:
        type: string
        description: Registered username.
        readOnly: true
      firstName:
        type: string
        description: First name.
      lastName:
        type: string
        description: Last name.
      createdOn:
        type: integer
        description: Timestamp when the user was created.
        readOnly: true
      updatedOn:
        type: integer
        description: Timestamp when the user was last updated.
        readOnly: true
      _links:
        readOnly: true
        description: A collection of links related to this resource.
        type: array
        items:
          $ref: '#/definitions/Link'


  Ticket:
    title: Ticket
    type: object
    properties:
      id:
        type: string
        description: A ticket identifier.
        readOnly: true
      author:
        type: string
        description: Person who created the ticket.
        readOnly: true
      organizationId:
        type: string
        description: The organization where the ticket belongs.
        readOnly: true
      teamId:
        type: string
        description: The team where the ticket belongs.
      title:
        type: string
        description: Title of the ticket.
      description:
        type: string
        description: Description of the ticket.
      owner:
        type: string
        description: Person who is assigned to the ticket.
      category:
        type: string
        description: Category of the ticket.
      type:
        type: string
        description: Type of the ticket.
        enum:
          - "Bug"
          - "Feature Request"
          - "Inquiry"
      priority:
        type: string
        description: Priority of the ticket.
        enum:
          - "Low"
          - "Normal"
          - "High"
          - "Critical"
      status:
        type: string
        description: Status of the ticket.
        enum:
          - "Open"
          - "On Going"
          - "Closed"
      archived:
        type: boolean
        description: True if the ticket is archived.
      tags:
        type: array
        items:
          type: string
      createdOn:
        type: integer
        description: Timestamp when the ticket was created.
        readOnly: true
      updatedOn:
        type: integer
        description: Timestamp when the ticket was last updated.
        readOnly: true
      _links:
        readOnly: true
        description: A collection of links related to this resource.
        type: array
        items:
          $ref: '#/definitions/Link'
    required:
      - title

  Task:
    title: Task
    type: object
    properties:
      id:
        type: string
        description: A task identifier.
        readOnly: true
      author:
        type: string
        description: Person who created the task.
        readOnly: true
      name:
        type: string
        description: Task name.
      owner:
        type: string
        description: Person who is assigned to the task.
      color:
        type: string
        description: Task color.
      pinned:
        type: boolean
        description: True if the task is pinned.
      completed:
        type: boolean
        description: True if the task is completed.
      archived:
        type: boolean
        description: True if the task is archived.
      tags:
        type: array
        items:
          type: string
      createdOn:
        type: integer
        description: Timestamp when the task was created.
        readOnly: true
      updatedOn:
        type: integer
        description: Timestamp when the task was last updated.
        readOnly: true
      _links:
        readOnly: true
        description: A collection of links related to this resource.
        type: array
        items:
          $ref: '#/definitions/Link'
    required:
      - name

  Attachment:
    title: File Attachment
    type: object
    properties:
      id:
        type: string
        description: A attachment identifier.
        readOnly: true
      uploader:
        type: string
        description: Person who uploaded the file.
        readOnly: true
      name:
        type: string
        description: Attachment file name.
      type:
        type: string
        description: Attachment file type.
        readOnly: true
      size:
        type: integer
        description: Attachment size in bytes.
        readOnly: true
      tags:
        type: array
        items:
          type: string
      createdOn:
        type: integer
        description: Timestamp when the attachment was uploaded.
        readOnly: true
      _links:
        readOnly: true
        description: A collection of links related to this resource.
        type: array
        items:
          $ref: '#/definitions/Link'
    required:
      - name
      - content

  Message:
    title: Message
    type: object
    properties:
      id:
        type: string
        description: A attachment identifier.
        readOnly: true
      conversationId:
        type: string
        description: The conversation where the message belongs.
        readOnly: true
      author:
        type: string
        description: Person who wrote the message.
        readOnly: true
      content:
        type: string
        description: Message content.
      createdOn:
        type: integer
        description: Timestamp when the attachment was uploaded.
        readOnly: true
      updatedOn:
        type: integer
        description: Timestamp when the task was last updated.
        readOnly: true
      _links:
        readOnly: true
        description: A collection of links related to this resource.
        type: array
        items:
          $ref: '#/definitions/Link'
    required:
      - name
      - content


  Event:
    title: Event
    type: object
    properties:
      id:
        type: string
        description: A event identifier.
        readOnly: true
      name:
        type: string
        description: Name of the event.
        readOnly: true
      description:
        type: string
        description: Description of the event.
        readOnly: true
      raisedBy:
        type: string
        description: Person who raised the event.
        readOnly: true
      happenedOn:
        type: integer
        description: Timestamp when the event happened.
        readOnly: true

  Meta:
    title: Collection Meta Data
    type: object
    properties:
      count:
        type: integer
        readOnly: true
        description: Number of resources in the page.
      total:
        type: integer
        readOnly: true
        description: Total number of resources in the collection.
      pages:
        type: integer
        readOnly: true
        description: Total number of pages in the collection.
      size:
        type: integer
        readOnly: true
        description: Maximum number of resources allowed per page.

  Link:
    title: Link
    type: object
    readOnly: true
    properties:
      rel:
        type: string
        description: Relation of the link to the current resource or collection.
        readOnly: true
      href:
        type: string
        description: The URL of the link.
        readOnly: true
      title:
        type: string
        description: The name or title of this link.
        readOnly: true

  Error:
    type: object
    properties:
      error:
        readOnly: true
        description: Error details.
        type: array
        items:
          type: object
          title: Error Detail
          properties:
            code:
              type: string
              description: Error code.
            message:
              type: string
              description: Error message.
            description:
              type: string
              description: Error description.
            file:
              type: string
              description: File name where the error was caught.
            line:
              type: string
              description: Line number where the error was caught.

responses:
  RequestPerformed: # HTTP 204
    description: The request was successfully performed.
  RequestAccepted: # HTTP 202
    description: The request was accepted.

  ResourceUpdated: # HTTP 204
    description: The resource was successfully updated.
  ResourceDeleted: # HTTP 204
    description: The resource was successfully deleted.

  NotModified: # HTTP 304
    description: Resource was not modified.

  BadRequest: # HTTP 400
    description: Invalid, incomplete or malformed request.
    schema:
      $ref: '#/definitions/Error'
  ExpiredSession: # HTTP 401
    description: User session has expired.
    schema:
      $ref: '#/definitions/Error'
  PaidResource: # HTTP 402
    description: The resource you are trying to access requires a payment to be settled.
    schema:
      $ref: '#/definitions/Error'
  PaidCollection: # HTTP 402
    description: The collection you are trying to access requires a payment to be settled.
    schema:
      $ref: '#/definitions/Error'
  PaidOperation: # HTTP 402
    description: The operation you are trying to perform requires a payment to be settled.
    schema:
      $ref: '#/definitions/Error'
  AccessDenied: # HTTP 403
    description: User has no permission to access this resource.
    schema:
      $ref: '#/definitions/Error'
  UnauthorizedRequest: # HTTP 403
    description: User has no permission to perform this request.
    schema:
      $ref: '#/definitions/Error'
  ResourceNotFound: # HTTP 404
    description: The resource you are trying to access does not exist.
    schema:
      $ref: '#/definitions/Error'
  MethodNotAllowed: # HTTP 405
    description: The resource is not supporting the HTTP method you are using.
    schema:
      $ref: '#/definitions/Error'
  DeletedResource: # HTTP 410
    description: The resource you are trying to access was already deleted.
    schema:
      $ref: '#/definitions/Error'
  DuplicateResource: # HTTP 409
    description: Resource already exists.
    schema:
      $ref: '#/definitions/Error'
  ResourceConflict: # HTTP 409
    description: There was a conflict encountered when updating the resource.
    schema:
      $ref: '#/definitions/Error'
  UnprocessableEntity: # HTTP 422
    description: Validation Error.
    schema:
      $ref: '#/definitions/Error'
  TooManyRequests: # HTTP 429
    description: User has sent too many requests and needed to be throttled.
    schema:
      $ref: '#/definitions/Error'
  ServerError: # HTTP 500
    description: A server or application error was encountered.
    schema:
      $ref: '#/definitions/Error'
  ServerUnavailable: # HTTP 503
    description: The server is unavailable at the moment.
    schema:
      $ref: '#/definitions/Error'

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
